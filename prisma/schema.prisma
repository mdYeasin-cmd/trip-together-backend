// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  name                String
  email               String               @unique
  password            String
  needPasswordChange  Boolean              @default(true)
  role                UserRole
  status              UserStatus           @default(ACTIVE)
  isDeleted           Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  userProfile         UserProfile?
  trips               Trip[]
  travelBuddyRequests TravelBuddyRequest[]

  @@map("users")
}

model UserProfile {
  id        String   @id @default(uuid())
  userId    String   @unique
  bio       String?
  age       Int?
  gender    Gender?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("user_profiles")
}

model Trip {
  id                  String               @id @default(uuid())
  userId              String
  photos              Json
  destination         String
  travelType          String
  budget              Float
  startDate           DateTime
  endDate             DateTime
  description         String
  isDeleted           Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  travelBuddyRequests TravelBuddyRequest[]

  user User @relation(fields: [userId], references: [id])

  @@map("trips")
}

model TravelBuddyRequest {
  id        String                   @id @default(uuid())
  tripId    String
  userId    String
  status    TravelBuddyRequestStatus
  isDeleted Boolean                  @default(false)
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt

  user User @relation(fields: [userId], references: [id])
  trip Trip @relation(fields: [tripId], references: [id])

  @@map("travel_buddy_requests")
}

enum TravelBuddyRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  TRAVELER
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum Gender {
  MALE
  FEMALE
}
